گزارش کار پر وژه :
برای ساخت این پروژه کار را به مراحل زیر تقسیم کردیم :
1
) طراحی کلاس های اشیای مشخص و کاربردی: کلاس های مورد نیاز پروژه مانند Shop , product , BaseInfo , User , Seller , Admin , Wallet , Category , Order )که منظور از BaseInfo
اطلاعات پایه مانند نام کاربری و رمز عبور و ایمیل بود و هر فردی اعم از مدیر، فروشنده و مشتری باید ارائه
میکرد( ساختیم و سپس کلاس های فروشنده و کاربر)مشتری( و مدیر را از این کلاس ارثبری کردیم و در هریک
بنا بر توضیحات فیلد های داده شده را به صورت private از جهت انکپسولیشن تعریف و parametrized constructor و متد های getter و setter را برای همگی به وجود آوردیم.
2
) پیاده سازی متد های لازم : به ترتیب توضیحات داده شده برای هر تسک اعم از Account type و User attribute و admin attribute وغیره را خواندیم و متد های مورد نیاز را روی کلاس های مرتبط ساختیم
تا در تابع main فرا خوانی کنیم مثل مانند متدهایی برای اضافه کردن محصول به فروشگاه، ایجاد حساب
کاربری جدید و ثبت سفارش .
3
) بررسی ارتباط بین کلاس ها : در گام بعد برسی کردیم که چگونه هر کلاس با کلاس دیگری نیاز دارد تا ارتباط
داشته باشد مثلا یک فروشگاه به لیست حسابهای کاربری ، محصولات و سفارشات باید دسترسی میداشت پس ازین
دست ار تباطات را ایجاد کردیم .
4
) تشکیل منوی رابط کاربر و برنامه : منو را در بدنه ی اصلی main ایجاد کرده و به طبع بنا بر نیاز توابعی دیگر تعر یف
کرده و از آن ها و توابع کلاس های دیگر اس تفاده کردیم .
توضیح گام به گام و جزئی:
گام 1 ( ساخت کلاس shop بنا بر توضیحات تسک Shop پروژه : در اینجا کلاسی به این نام با فیلد های گفته شده
ساختیم چون نیاز به لیستی از کلاس های BaseInfo )حساب کاربری( ، Products )محصولات( ، Orders )سفارشات(
داشتیم آنهارا همزمان ایجاد و List<> ای از آنها در shop ایجاد کردیم و همچنین متد های add شان را هم برای افزودن
نمونه بهلیست هایی که ایجاد کردیم ساختیم. برای تابع مجموع سود هم یک دابل totalProfit که 0.0 است را در نظر
گرفتیم و سپس در تابع addOrder هم مشخص کردیم به ازای هر order ای که اضا فه میشود قیمتش به totalProfit
اضا فه شود و در انتها از getter آن برای برگرداندن سود کل اضاقه کردیم.
گام 2 ( ساخت کلاس های Account type بنا بر توضیحات Account type : برای این قسمت ابتدا یک کلاس انتزاعی
BaseInfo با فیلدهای گفته شده در مقدمه س اخیتم و س پس سه کلاس User و Seller و Admin ر از آن ارثبری
کردیم.
گام 3 ( ادامه ی تکمیل کلاس User بنا بر توضیحات User Attributes : فیلدهای به ارث برده را دیگر تکرار نکردیم و
فیلدهای جدید اعم از شماره تلفن و آدرس را در آن تعریف کردیم.سپس برای سبد خرید مشتری یک کلاس cart و
را برای مدیریت سبد خرید و مدیریت اقلام داخل سبد خرید تعریف کردیم.به این گونه که در cartItem CartItem
فقط دو فیلد یکی از جنس Product به نام Product و دیگری از جنس int به نام quantity به همراه متد های
getter و setter و کانستراکتور پارامتری تعریف کردیم و در کلاس Cart لیستی از CartItem ساختیم و علاوه بر
getter ها و setter ها و کانستراکتور دومتد addItem و getTotalPrice ساختیم تا بتوان با آنها برای هر کاربر به
سبد خرید افزود و مبلغ سبد خرید را محاسبه کرد.برای تابع مبلغ سبد خرید یا getTotalPrice هم یک حلقه ی for each ایجاد کردیم تا روی تک تک item های سبد خرید پیمایش کرده و مبالغ آنهارا ضربدر تعدادشان کرده و جمع
کند.. سپس یک لیست از Orders درست کردیم که سفارشات را ذخیره کرده و یک لیست از محصولات خریداری شده
به نام purchasedProducts هم ساختیم تا این محصولات را ذخیره کند و کلاس wallet هم برای کیف پول ساخته
و همه ی این ها برای مدیر قابل مشاهده است.
چالش 1 : هر مدیر بتواند یک نمایه از کاربر مورد نظر داشته باشد که شامل همه ی User Attributes هاست:
تابع adminMenu در کلاس Main که متعلق به admin است گزینه ی اولش view sombody’s پروفایل
است که مدیر با انتخاب این گزینه میتواند یک یوزرنیم وارد کرده و اطلاعات ان کاربر را ببیند.برای این هدف ابتدا
یک تابع getUserAccountByUsername در کلاس shop تعریف میکنیم که یک ورودی از جنس string
تحت عنوان یوزرنیم دریافت کرده و با یک حلقه ی for each روی همه ی baseInfo ه ا میرود میگردد تا این
استرینگ را پید کند و وقتی پیدا کرد همان شی baseInfo را برمیگرداند.سپس در یک حل قه ی شرطی if گفته ایم
اگر این شی baseInfo وجود داشت)نال نبود( و از جنس کلاس فرزند User بود )با instanceof ( انگاه تابع
dissplayAccountDetails را برگردان.این تابع بدنه اش به صورت انتزاعی در کلاس BaseInfo تعریف شد و در
هرکلاس برای برگرداندن مشخصات آن کلاس به صورات جدا جدا تعریف شد.
گام 4(ساخت منو برای registration (در این تسک خواسته شده بود تا کاربران بتوانند ثبت نام ککند و وارد شوند و به
گزینه های خرید و ویرایش اطلاعات خود دسترسی پیدا کنند.برای این منظور ابتدا یک حلقه ی while true تعریف
کردیم تا از کاربر در لحظه ی ورود بپرسد که میخواهد ثبت نام کند (registration) یا وارد شود (login) یا اطلاعات
فروشگاه را بداند (about us) یا کلا قرار است خارج شود (exit) . حال اگرکاربر بخواهد ثبت نام کند یع نی گزینه ی
اول از او میخواهیم که مشخص کند تحت کدام عنوان کاربر، فروشنده و یا مدیر میخواهد وارد شو و مورد بحث الان ما
کاربر است. وقتی انتخاب کرد کاربر،اطلاعات مورد نیاز کانستراکتور User را با متغیر String از او دریافت کرده و سپس
یک نمونه از کلاس User ساخته و آن متغیر های دریافت شده را جای پارامتر های دریافتی این شی میگذاریم تا شی
User ایجاد شود و از آنجایی که در کلاس shop یک متد addUser داشتیم از آن برای اضافه کردن کاربر استفاده
میکنیم تا کاربر را ذخیره کند و کاربر بتواند login کند.
حال فرض میکنیم کاربر مورد دوم یعنی login را انتخاب کند.
چالش 2 (چگونه کاربر را برای login به یاد بیاوریم؟
به این منظور در کلاس Shop یک متد authenticate تعریف میکنیم که دو وردی از جن س استرینگ تحت عنوان
نام کاربری و رمزعبور میگیرد و میرود روی همه ی اعضای add شده در کلاس baseInfo دنبال نمونه ای با این
دو ویژگی میگردد و اگر اسم و پسورد آن شی با اسم و پسورد وارد شده مطابقت داشت آن شی را بر میگرداند حال
سپس درصورتی که همچ ین شی ای وجود داشت به متد getUserAcoountByUsername ک قبل تر تعریف
کردیم میدهیم تا اطلاعات این شی را بما برگرداند و سپس میگوییم اگر این baseInfo نمونه ی User بود بهش
بگو تو یه کاربر هستی و منوی کاربر رو بهش نمایش بده.
چالش 3(چگونه محصولی را سرچ کنیم؟
منوی کاربر شامل edit profile و search product و view Cart و Request AddFunds است. با توجه
به خواسته ی این تسک مورد اول و دوم را توضیح میئهیم.برای ادیت کردن پروفایل که فقط کافی است اطلاعات
جدید را از کاربر گرفته و با تابع set ج ایگزین قبلی ها کنی م.برای مورد دوم یعنی چست و جوی محصولات اول یک
تابع searchProduct در کلاس shop تعریف میکنیم که یک لیست خالی از محصولات دارد و با یک حلقه ی
for each میرود روی لیست Product های موجود در این کلاس پیمایش می کند و دنبال محصولی شامل کلمه
ی وارد شده میگردد و اگر موجود بود آنرا داخل لیست خالی می اندازد حال در تابع main در متد searchProduct
این متد را روی کلمه ی مورد نظر میزنیم و اگر لیست برگردانده شده خالی نبود با یک حلقه ی for میدهیم کل
اعضای لیست را برگردانده و به کاربر نمایش دهد.
چالش 4 (بعد ازینکه محصول را سرچ کرد و نمایش داد چگونه تعدادی که کاربر میخواهد را از موجودی کم و به سبد
خرید او بی افزاید؟
تعداد مدنظر کاربر را از او در یافت کرده و اگر آن تعداد از موجودی کل کمتر یا برابر بود با تابع addItem به سبد
خرید اقزوده و س پس با تابع reduceQuantuty از موجودی کل کم میکنیم.تکلیف متد های add دار که معلوم
است،این تابع reduce هم در کلاس product تعریف شد ک یک آرگومان int ای میگرد و میرود از
quantityAvailable هر محصول آنرا کم میکند و عددحاصل را جای quantityAvailable میگذارد.
اگر هم کاربر مورد سوم از منو یعنی view Cart به معنای نمایش سبد خرید را انتخاب کند با متد های get به
راحتی کالاهای مدنظرش را که تاحالا به cart افزوده بهش نشان میدهیم.
گام 5 (پیاده سازی تسک Product Catalog با تسک قبل در بالا توضیح داده شد.
گام 6(پی اده سازی تسک Admin Attributes : فیلدهای ابتدایی مدیر که از کلاس BaseIntro به ارث آمده است.نیاز
داریم یک مدیر ثابت از پیش تعریف شده معرف کنیم در بدنه ی Main یک نمونه از Admin میسازیم و خودمان آنرا
مقدار دهی میکنیم و سپس برای آنکه به لیست کل کاربرانمان افزوده شود نام نمونه مان از کلاس Admin را به متد
AddBaseInfo از کلاس shop پاس میدهیم.حال میخواهیم ورود مدیران دیگر به این صورت باشد که درخواستی ارسال
کنند و توسط مدیری پذیرفته شود و سپس حساب کاربری شان مدیر شود.به این منظور در هنگام registration وقتی
از کاربر پرسیدیم ماهیتت چیست و گفت Admin از او نام کاربری رمز عبور ایمیل و ایملش را میگیریم و با استفاده از
کلاس Admin از روی او یک شی میسازیم و درخواستی برای Admin قبلا تشکیل شده میفرستیم.
چالش 5(چگونه به ادمین ریکوعست بفرسیم؟
برای این کار از تابع addAdminRequest استفاده میکنیم.ابتدا در کلاس Shop یک لیست خالی از ادمین درست
میکنیم و با این تابع ذکر شده نام فرد درخواست داده را به آن لیست میدهیم.سپس ادمین واقعی که دارای منویی با
عناوین view somebody’s profile و Approve seller و Approve admin و Approve add funds
است باید گزینه ی سوم را انتخاب کند و با فشردن این دکمه تابع approveAdmin از کلاس main فراخواندع
میشود.این تابع ابتدا به کمک یک حلقه ی for اعضای ان لیستی که addAdminRequest برمیگرداند را تک به
ت ک با شماره برمیگرداند و سپس از مدیر خواسته میشود که شماره درخواست مورد نظر خود را وارد کند . سعی
میشود ورودی به عدد تبدیل شود. اگر ورودی یک عدد نباشد، پیام خطا نمایش داده میشود و حلقه ادامه مییابد .
اگر هم عدد وارد شده خارج از محدوده لیست درخواستها باشد، مجددا پیام خطا نمایش داده میشود و حلقه ادامه
مییابد . پس از دریافت ورودی معتبر از مدیر، درخواست تایید مدیر مورد نظر از لیست adminRequests دریافت
میشود. سپس با فراخوانی متد approveAdmin در کلاس Shop ، این مدیر تایید میشود و پیام موفقیت نمایش
داده میشود .
گام 7 (پیاده سازی تسک Seller Attributes : فیلد های گفته شده برای فروشنده تعریف شد و constructor و متد
های getter و setter ان نیز در کلاسش نوشته شد . حال فرض میکنیم فردی با عنوان seller ثبت نا م کرده و login
میکند.به او اطلاع میدهیم که هنوز certified نیست و نیاز است ک به مدیر درخواست بفرستد.مراحل ارسال درخواست
و پذیرشش هم مانند سری قبل است.وقتی درخواست فروشنده توسط مدیر تایید شد فرد به منوی فروشنده دسترسی پیدا
میکند که شامل add product و view product میباشد.همانطور که در این تسک خواسته شده بود در همان ابتدا
در کلاس seller ما یک لیست محصولات و یک کیف پول به هر فروشنده اختصاص داده بودیم حال اگر فروشنده میتواند
با گزینه ی اول محصولاتی را به لیست محصولات خود اضافه کند.برای این کار یک متد addProduct در همان main
ساختیم و استفاده کردیم.این تابع در ابتدا نام،قیمت،تعداد و دسته بندی محصول را میگیرد و سپس با استفاده از این
اطلاعات یک شی جدد از روی کلاس Product ساخ ته و هم در لیست محصولات فروشنده و هم در لیست محصولات
فروشگاه add میکند.خیلی هم مهم است که هردو را انجام دهد زیرا اگر به لیست محصولا فروشگاه افزوده نشود کاربر
آنهارا نخواهد دید و دیگر امکان خرید آنها وجود نخواهد داشت.اگر هم فروشنده مورد دوم یعنی view product را
انتخاب کند به راحتی با استفاده از متد های get به او لیست محصولاتش را بر میگردانیم.
گام 8 (پیاده سازی تسک wallet :مجددا از همان روش قبلی برای فرستادن درخواست برگرداندن وجه به کیف پول کاربر
استفاده میکنیم و در صورتی که ادمین موافقت کرد آن مم قدار را به کاربر برمیگردانیم.
گام 9(پیاده سازی تسک Product : از قبل که کلاسش ایجاد شده بودو فیلدهایش ایجاد شده بود.و برای کاربران هم
امکان اضافه کردن اینها به سبد خرید ممکن شد و در گام های قبلی شرح داده شد.
گام 10 (پیاده سازی تسک Category : برای این تسک کلاس Category را بنا کردیم و لیستی از product ها یک
استرینگ نام برایش تعریف کردیم.مانند همه ی متدهای دیگر برایش متدهای getter و setter تعریف کردیم سپس
برای اینکه در ابتدا لیست محصولاتمان خالی نباشد با ارث بری ازین کلاس 5 دسته کالای electronics , books , cloths , good , cosmetics , sports ارث بری کردیم.سپس از هر دسته در کلاس shop یک نمونه ساختیم و به
هر نمونه یک کالارا add کردیم و همه را در تابعی به نام addDefaultProducts گذاشتیم و در تابع main فراخوانی
کردیم.
